<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Commentari</title>
    <link href="https://commentari.dev/atom.xml" rel="self"/>
    <link href="https:&#x2F;&#x2F;commentari.dev&#x2F;"/>
    <updated>2025-09-09T12:04:08+0000</updated>
    <id>https:&#x2F;&#x2F;commentari.dev&#x2F;</id>

    
    
    
    
    
    
        
        
    
        
        
    
        
        
            
            <entry>
                <title>A first foray into Arrow (Part 1: Python)</title>
                <link href="https:&#x2F;&#x2F;commentari.dev&#x2F;software&#x2F;getting-started-arrow&#x2F;"/>
                <updated>2025-09-07T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;commentari.dev&#x2F;software&#x2F;getting-started-arrow&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;If we borrow a page from Aristotle, to learn a thing--to understand its causes&amp;lt;sup&amp;gt;[1]&amp;lt;&amp;#x2F;sup&amp;gt;--we must first accumulate practical experience with it and hone our craft; only after can we analyze effectively.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This post begins a short series. We embark with Arrow in Python. Next, I will turn to Arrow in Rust, then survey Arrow&amp;#x27;s history, and finally, close by developing Arrow&amp;#x27;s key invariants.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#hello-columnar&amp;quot;&amp;gt;&amp;lt;em&amp;gt;hello columnar&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#one-to-two&amp;quot;&amp;gt;&amp;lt;em&amp;gt;one row becomes two&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#section_2&amp;quot;&amp;gt;&amp;lt;em&amp;gt;columns and taking data in stride&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#suba&amp;quot;&amp;gt;&amp;lt;em&amp;gt;example: table schema&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#subb&amp;quot;&amp;gt;&amp;lt;em&amp;gt;example: columns&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#subc&amp;quot;&amp;gt;&amp;lt;em&amp;gt;example: rows&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#section_3&amp;quot;&amp;gt;&amp;lt;em&amp;gt;records in batches&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#section_4&amp;quot;&amp;gt;&amp;lt;em&amp;gt;caveat lector&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#section_5&amp;quot;&amp;gt;&amp;lt;em&amp;gt;parting thoughts&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;commentari.dev&amp;#x2F;software&amp;#x2F;getting-started-arrow&amp;#x2F;#endnotes&amp;quot;&amp;gt;&amp;lt;em&amp;gt;endnotes&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h2 id=&amp;quot;hello-columnar&amp;quot;&amp;gt;hello columnar&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;SQLite&amp;lt;sup&amp;gt;[2]&amp;lt;&amp;#x2F;sup&amp;gt; is a simple row-based runtime. Its minimal configuration keeps Arrow front and center. Arrow is columnar. What does that mean? What does it mean in practice?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Setup for this section:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;have a Python 3 installation&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;configure and activate a Python virtual environment&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;pip install --upgrade adbc-driver-sqlite adbc-driver-manager pyarrow&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;First, we compare the results of a simple select-and-fetch of a single record.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;# hello_db.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite3 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite_rows
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;from &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;adbc_driver_sqlite &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;dbapi &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite_arrow
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;#    ^ we&amp;amp;#39;ll get to adbc later
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;QUERY &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;SELECT
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Hello, world!&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39; as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; hello,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; one,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    length(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;hi&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; two
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;hello_db&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;db_api&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;with &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;db_api.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;connect&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;:memory:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;connection:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        cursor = connection.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cursor&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;try&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cursor.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;execute&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;QUERY&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            row = cursor.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;fetchone&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;row
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;finally&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cursor.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;close&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite_res = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;hello_db&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(sqlite_rows)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;arrow_res  = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;hello_db&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(sqlite_arrow)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Row-based SQLite:             &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{sqlite_res}&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Arrow Standard:               &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{arrow_res}&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;What is the output of this script?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;shell&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-shell &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-shell&amp;quot; data-lang=&amp;quot;shell&amp;quot;&amp;gt;&amp;lt;span&amp;gt;$ python hello_db.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Row-based SQLite:             (&amp;amp;#39;Hello, world!&amp;amp;#39;, 1, 2)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Arrow Standard:               (&amp;amp;#39;Hello, world!&amp;amp;#39;, 1, 2)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We print the data values. The DB-API 2.0 SQLite driver gives a row. In Python, that row is a &amp;lt;code&amp;gt;Tuple&amp;lt;&amp;#x2F;code&amp;gt;. Meanwhile, the Arrow standard hands us...a row?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Sometimes, types say more. Log more type information.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Row-based SQLite row type:    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;type&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(sqlite_res)}&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Arrow Standard row type:      &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;type&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(arrow_res)}&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Row-based SQLite data types: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, [&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;type&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(x) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;x &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite_res])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Arrow Standard data types:   &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, [&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;type&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(x) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;x &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;arrow_res])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This tells us almost nothing.&amp;lt;sup&amp;gt;[3]&amp;lt;&amp;#x2F;sup&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;Row-based SQLite row type:    &amp;amp;lt;class &amp;amp;#39;tuple&amp;amp;#39;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Arrow Standard row type:      &amp;amp;lt;class &amp;amp;#39;tuple&amp;amp;#39;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Row-based SQLite data types:  [&amp;amp;lt;class &amp;amp;#39;str&amp;amp;#39;&amp;amp;gt;, &amp;amp;lt;class &amp;amp;#39;int&amp;amp;#39;&amp;amp;gt;, &amp;amp;lt;class &amp;amp;#39;int&amp;amp;#39;&amp;amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Arrow Standard data types:    [&amp;amp;lt;class &amp;amp;#39;str&amp;amp;#39;&amp;amp;gt;, &amp;amp;lt;class &amp;amp;#39;int&amp;amp;#39;&amp;amp;gt;, &amp;amp;lt;class &amp;amp;#39;int&amp;amp;#39;&amp;amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;On the surface, Arrow looks no different. The values are the same. Their origins are not.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The standard sqlite3 implementation built a Python tuple from a database row. Arrow does something subtler.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This difference is clearer with multiple records.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;one-to-two&amp;quot;&amp;gt;one row becomes two&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;First, add a second row to the result set.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;diff&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-diff &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-diff&amp;quot; data-lang=&amp;quot;diff&amp;quot;&amp;gt;&amp;lt;span&amp;gt;QUERY = &amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;SELECT
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;#39;Hello, world!&amp;amp;#39; as hello,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    1 as one,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    length(&amp;amp;#39;hi&amp;amp;#39;) as two
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+ union all
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+ SELECT
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+    &amp;amp;#39;Hello, again!&amp;amp;#39; as hello,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+    1+0 as one,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+    1 &amp;amp;lt;&amp;amp;lt; 1 as two
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Second, fetch both rows (or more if they existed) as a &amp;lt;code&amp;gt;List[Row]&amp;lt;&amp;#x2F;code&amp;gt;. This row list represents a database table.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;diff&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-diff &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-diff&amp;quot; data-lang=&amp;quot;diff&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;-        row = cursor.fetchone()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;-        return row
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+        table = cursor.fetchall()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+        return table
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Run it back.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;shell&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-shell &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-shell&amp;quot; data-lang=&amp;quot;shell&amp;quot;&amp;gt;&amp;lt;span&amp;gt;$ python hello_db_redux.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Row-based SQLite table:       [(&amp;amp;#39;Hello, world!&amp;amp;#39;, 1, 2), (&amp;amp;#39;Hello, again!&amp;amp;#39;, 1, 2)]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Arrow Standard table:         [(&amp;amp;#39;Hello, world!&amp;amp;#39;, 1, 2), (&amp;amp;#39;Hello, again!&amp;amp;#39;, 1, 2)]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Again, no visible difference. The solution is to use PyArrow&amp;#x27;s Arrow-specific functions.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;diff&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-diff &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-diff&amp;quot; data-lang=&amp;quot;diff&amp;quot;&amp;gt;&amp;lt;span&amp;gt;def hello_db(db_api):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    with db_api.connect(&amp;amp;quot;:memory:&amp;amp;quot;) as connection:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        cursor = connection.cursor()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        try:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cursor.execute(QUERY)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;-           table = cursor.fetchall()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;+           table = cursor.fetchallarrow()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            return table
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        finally:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cursor.close()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;-sqlite_res = hello_db(sqlite_rows)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;arrow_res  = hello_db(sqlite_arrow)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;-print(f&amp;amp;quot;Row-based SQLite table:       {sqlite_res}&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Third time&amp;#x27;s the charm.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;shell&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-shell &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-shell&amp;quot; data-lang=&amp;quot;shell&amp;quot;&amp;gt;&amp;lt;span&amp;gt;Arrow Standard:   pyarrow.Table
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hello: string
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;one: int64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;two: int64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;----
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hello: [[&amp;amp;quot;Hello, world!&amp;amp;quot;,&amp;amp;quot;Hello, again!&amp;amp;quot;]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;one: [[1,1]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;two: [[2,2]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We are given the table type--now &amp;lt;code&amp;gt;pyarrow.Table&amp;lt;&amp;#x2F;code&amp;gt;--along with the table&amp;#x27;s schema and a columnar view of its data.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Arrow stores each column in a contiguous, type-homogeneous array&amp;lt;sup&amp;gt;[4]&amp;lt;&amp;#x2F;sup&amp;gt;. In our example, all fields of the &amp;lt;code&amp;gt;hello&amp;lt;&amp;#x2F;code&amp;gt; column are packaged into a String array of length 2; the values of column &amp;lt;code&amp;gt;one&amp;lt;&amp;#x2F;code&amp;gt; are contained in an Integer array of length 2 (likewise for column two). This is the tangible essence of &amp;quot;columnar.&amp;quot;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;hello&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;one&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;two&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Hello, world!&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Hello, again!&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;Row-based implementations group values together horizontally, in tuples.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;row-oriented layout (tuples of references in memory)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+---------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| (&amp;amp;quot;Hello, world!&amp;amp;quot;, 1, 2)   |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+---------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| (&amp;amp;quot;Hello, again!&amp;amp;quot;, 1, 2)   |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+---------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Columnar standards think in groups of columns.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;column-oriented layout (contiguous buffers in memory)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hello: [&amp;amp;quot;Hello, world!&amp;amp;quot;, &amp;amp;quot;Hello, again!&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;one:   [1, 1]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;two:   [2, 2]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This is the what. The bytes tell us why.
&amp;lt;br&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;section_2&amp;quot;&amp;gt;columns and taking data in stride&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The following examples use this setup.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;# arrow_examples.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;from &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;adbc_driver_sqlite &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;dbapi &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sqlite_arrow
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;QUERY &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;SELECT
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Hello, world!&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39; as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; hello,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; one,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    length(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;hi&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; two
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;union all
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;SELECT
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Hello, again!&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39; as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; hello,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; one,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;amp;lt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;as&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt; two
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;connection = sqlite_arrow.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;connect&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;:memory:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;cursor = connection.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cursor&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;cursor.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;execute&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(QUERY.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;strip&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;())
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;table = cursor.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;fetchallarrow&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h4 id=&amp;quot;suba&amp;quot;&amp;gt;see table schema (type information)&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(table.schema)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;A table&amp;#x27;s schema defines its structure. Part of that structure are columns, and each column has a type. In Arrow, types belong to a rich type system optimized for efficient cross-language representation.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;hello: string
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;one: int64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;two: int64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We see two categories here: primitive scalars (e.g. &amp;lt;code&amp;gt;i64&amp;lt;&amp;#x2F;code&amp;gt;) and variable-length types (e.g. &amp;lt;code&amp;gt;string&amp;lt;&amp;#x2F;code&amp;gt;).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In creating a formal specification, Arrow gives users a logical &amp;lt;em&amp;gt;lingua franca&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;carte blanche&amp;lt;&amp;#x2F;em&amp;gt; to optimize types in memory. Contiguous memory cells translate to vectorization (cf. faster loads). Boolean values are bit-packed (1 bit per value!!). I am personally inspired by the engineering in this layer alone.&amp;lt;sup&amp;gt;[5]&amp;lt;&amp;#x2F;sup&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Note other types:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;structured data types (e.g. &amp;lt;code&amp;gt;list&amp;amp;lt;T&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;temporal types (e.g. &amp;lt;code&amp;gt;date32&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;time64&amp;lt;&amp;#x2F;code&amp;gt;)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;fixed width decimals&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;a full suite of scalars including floats&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h4 id=&amp;quot;subb&amp;quot;&amp;gt;grab an entire column&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(table[&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;one&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;])  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;# pyarrow.ChunkedArray
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;pyarrow&amp;lt;&amp;#x2F;code&amp;gt; can obtain columns by name.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt; [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    1,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This operation is zero-copy.&amp;lt;sup&amp;gt;[6]&amp;lt;&amp;#x2F;sup&amp;gt; In Arrow, each column is stored in contiguous memory blocks. To &amp;quot;get the column,&amp;quot; Arrow simply returns a new view pointing at the same buffers—no data are copied. So, why is the type logged above &amp;lt;strong&amp;gt;ChunkedArray&amp;lt;&amp;#x2F;strong&amp;gt;?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Imagine we have an &amp;lt;code&amp;gt;int64&amp;lt;&amp;#x2F;code&amp;gt; column. It might exist in memory as several chunks.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;ChunkedArray (logical column)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        +-------------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        |           |           |       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      Array       Array       Array   ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;     (len=3)     (len=2)     (len=4)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Array #1 → [1, 2, 3]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Array #2 → [4, 5]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Array #3 → [6, 7, 8, 9]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Logical column = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;A &amp;lt;strong&amp;gt;ChunkedArray&amp;lt;&amp;#x2F;strong&amp;gt; looks like one continuous column. In truth, it may be split into many chunks. This spec is performant by design. Most systems produce data in batches. Arrow keeps those batches in memory as they come, without copying, without merging. You see a single, seamless column.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now, back to the code at the section heading.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;Arrow Array (view object)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+--------------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| type: int64                    |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| length: 2                      |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| offset: 0                      |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| buffers:                       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;|   [0] validity bitmap -------+ |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;|   [1] values buffer pointer -+ |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;+--------------------------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Elsewhere in memory:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;values buffer (contiguous int64):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  01 00 00 00 00 00 00 00
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  01 00 00 00 00 00 00 00
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# logical view → [1, 1]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The column &amp;lt;code&amp;gt;one&amp;lt;&amp;#x2F;code&amp;gt; has only a single Array, so the &amp;lt;strong&amp;gt;ChunkedArray&amp;lt;&amp;#x2F;strong&amp;gt; is just a thin wrapper around that one chunk.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;An Arrow Array is not a literal array of values. It is a descriptor: buffers plus metadata like length, offset, and type. When you iterate or slice, Arrow does not have to touch or copy values. The underlying values stay in place. The buffers do not move.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Row-oriented systems are heavier. Each row&amp;#x27;s fields sit side by side in memory. To pull out a column, you must allocate a new buffer. Then, you walk every row, fetch the field, and copy it. With larger data you may need arrays of pointers. If the row count is unknown, the buffer may overflow and must grow. That means dynamic reallocations and more copying.&amp;lt;sup&amp;gt;[7]&amp;lt;&amp;#x2F;sup&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;subc&amp;quot;&amp;gt;grab a (one) row (table view)&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(table.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;slice&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Arrow is quite clever here.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;hello: [[&amp;amp;quot;Hello, again!&amp;amp;quot;]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;one: [[1]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;two: [[2]]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;Table.slice&amp;lt;&amp;#x2F;code&amp;gt; returns another Table. Again, this is zero-copy. The Table returned by &amp;lt;code&amp;gt;table.slice(1)&amp;lt;&amp;#x2F;code&amp;gt; is just a logical view. Precisely, the starting Table and the second obtained from slicing are collections of fat pointers (Arrow Array = metadata + buffer references). The total number matches the number of columns in the schema.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When dealing with database objects millions of records long, skipping the extra copy (or &amp;lt;em&amp;gt;copies&amp;lt;&amp;#x2F;em&amp;gt;) to access a column means significant time and cost savings.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;It also practices good systems hygiene: do not move or transform data until you must.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;section_3&amp;quot;&amp;gt;records in batches&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The abstractions so far stand on their own. They are fast and memory-thrifty. They also set the stage for how systems operate. Systems receive data in pieces. Results do not show up all at once. Arrow’s answer to this is the &amp;lt;strong&amp;gt;RecordBatch&amp;lt;&amp;#x2F;strong&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Earlier, we contrasted rows and columns:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;hello&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;one&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;two&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Hello, world!&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Hello, again!&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;A &amp;lt;strong&amp;gt;RecordBatch&amp;lt;&amp;#x2F;strong&amp;gt; is this block viewed columnar &amp;amp;amp; a metadata schema. It is, in Rust parlance, a kind of fat pointer. It points to buffers of data and explains how they fit together as a table.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;text&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-text &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-text&amp;quot; data-lang=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;span&amp;gt;RecordBatch
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  schema: {hello: string, one: int64, two: int64}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  columns:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    hello → Arrow Array (length N)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    one   → Arrow Array (length N)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    two   → Arrow Array (length N)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  other_metadata
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Like an Array, a RecordBatch does not own data. It points to column arrays and adds just enough metadata to bind them into a batch of rows.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;A &amp;lt;strong&amp;gt;Table&amp;lt;&amp;#x2F;strong&amp;gt; in Arrow is then a sequence of &amp;lt;strong&amp;gt;RecordBatches&amp;lt;&amp;#x2F;strong&amp;gt;. Put another way, a Table is a logical view over several &amp;lt;strong&amp;gt;Record Batches&amp;lt;&amp;#x2F;strong&amp;gt;. Each &amp;lt;strong&amp;gt;RecordBatch&amp;lt;&amp;#x2F;strong&amp;gt; contributes one chunk per column. Put together, they form seamless &amp;lt;strong&amp;gt;ChunkedArrays&amp;lt;&amp;#x2F;strong&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In Arrow, a table is not a naive list of rows. It is a microcosm of abstractions to achieve.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;Table (logical view)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   ├─ RecordBatch #1 (2 rows)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   │    hello → [&amp;amp;quot;Hello, world!&amp;amp;quot;, &amp;amp;quot;Hello, again!&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   │    one   → [1, 1]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   │    two   → [2, 2]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   │
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;   └─ RecordBatch #2 (3 rows)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        hello → [&amp;amp;quot;salve&amp;amp;quot;, &amp;amp;quot;χαῖρε&amp;amp;quot;, &amp;amp;quot;SALAVS&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        one   → [1, 8, 9]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        two   → [14, 16, 18]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Logical column &amp;amp;quot;one&amp;amp;quot; = [1, 1, 1, 8, 9]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;When two RecordBatches share the same schema, you can assemble them into one logical dataset.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;import pyarrow as pa
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# rb1, rb2: RecordBatch with identical schemas; zero-copy stitching
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;t = pa.Table.from_batches([rb1, rb2])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# optional: make each column a single contiguous chunk; requires a copy
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;t = t.combine_chunks()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Note the flexibility. RecordBatch gifts us that. It also makes Arrow streaming-ready (receive chunks asynchronously). And of course, it is analytics-ready, since we have the ability to treat several RecordBatches as one table.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h2 id=&amp;quot;section_4&amp;quot;&amp;gt;caveat lector!&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;In these examples, we used SQLite as the source engine. SQLite is still a row-based runtime. Arrow comes in only at the hand-off where the driver materializes results. Thus, our examples are &amp;lt;em&amp;gt;Arrow at the edge&amp;lt;&amp;#x2F;em&amp;gt;, and not Arrow &amp;lt;em&amp;gt;all the way down&amp;lt;&amp;#x2F;em&amp;gt;. The in-memory layout we explored is genuine Arrow. The engine is still building rows, however. Formats like ipc enable smooth columnar-native handoff of payloads between processes.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Arrow is also designed for interoperability. Any Arrow object in Python can be converted to rows for use in &amp;lt;code&amp;gt;Pandas&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;NumPy&amp;lt;&amp;#x2F;code&amp;gt;, or similar. Those first &amp;lt;code&amp;gt;fetchone&amp;lt;&amp;#x2F;code&amp;gt; prints--where an Arrow cursor returned a plain Python tuple--are examples of that. Arrow data lives in columnar buffers, but PyArrow makes it trivial to expose them as rows when needed.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The catch: conversion to rows means new Python objects. This suits debugging or small workloads. But, the real performance gains of Arrow come from staying columnar as long as possible.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;br &amp;#x2F;&amp;gt;
&amp;lt;h2 id=&amp;quot;section_5&amp;quot;&amp;gt;parting thoughts&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This write-up is a foothold into the Arrow way of thinking. Arrow shines in columnar workloads. Rows are there when you need them, but its real strength is in columns, arrays, and batches. PyArrow makes that model approachable, and the best way to internalize it is to play with the API yourself.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Here, we stayed high-level: what a Table is, how Arrays and ChunkedArrays behave, and why RecordBatch is the core unit. In Part 2, we will switch to Rust and drop closer to the metal.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;For now, the takeaway is this: Arrow at first looks familiar, but its engineering is informed by the hard realities of data at scale. This becomes only more clear the deeper we dive.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h2 id=&amp;quot;endnotes&amp;quot;&amp;gt;&amp;lt;em&amp;gt;endnotes&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;The traditional English gloss for &amp;lt;em&amp;gt;αἱ αἰτῐ́αι&amp;lt;&amp;#x2F;em&amp;gt;.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Ordinary CPython distributions include the &amp;lt;code&amp;gt;sqlite3&amp;lt;&amp;#x2F;code&amp;gt; module (via pysqlite).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;There&amp;#x27;s a certain kind of engineer who will ask &amp;#x27;why not use &amp;lt;code&amp;gt;fetchall&amp;lt;&amp;#x2F;code&amp;gt;.&amp;#x27; But even then the returns will be the same, this time, &amp;lt;code&amp;gt;List&amp;lt;&amp;#x2F;code&amp;gt; with a &amp;lt;code&amp;gt;Row&amp;lt;&amp;#x2F;code&amp;gt; type.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;type-homogeneous: all values in the collection are of a single, shared type; this is an oversimplification, as columns are stored as &amp;quot;contiguous buffers.&amp;quot; We&amp;#x27;ll talk more about this in Part 2 in Rust.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Arrow &amp;lt;code&amp;gt;BooleanArray&amp;lt;&amp;#x2F;code&amp;gt; &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;apache&amp;#x2F;arrow-rs&amp;#x2F;blob&amp;#x2F;d9a4b39815de52a15ca84b392a39fdf422361718&amp;#x2F;arrow-array&amp;#x2F;src&amp;#x2F;array&amp;#x2F;boolean_array.rs#L68&amp;quot;&amp;gt;source&amp;lt;&amp;#x2F;a&amp;gt; for those immediately curious. This is an accessible implementation detail that speaks to what Arrow does under the hood.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;zero-copy: Zero-copy means accessing or transferring data without creating a new copy of the underlying bytes. I need to write a blog post that celebrates this property one day. Here in Python, views are zero-copy; materialization (e.g., converting to lists&amp;#x2F;dataframes) allocates.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;There are mitigation strategies like overallocating upfront or maintaining row counts.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
</content>
            </entry>
            
        
    
</feed>
